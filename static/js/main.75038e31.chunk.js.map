{"version":3,"sources":["Card.js","CardList.js","robots.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["card","name","id","email","className","alt","src","CardList","robots","CardListComponont","map","user","i","Card","key","username","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchField","target","value","state","filteredRobots","this","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4NAeeA,EAZF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,GAAKC,EAAW,EAAXA,MACtB,OACI,yBAAKC,UAAU,sDACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BJ,EAA1B,cACpB,6BACI,4BAAKD,GACL,2BAAIE,MCaLI,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAoBD,EAAOE,KAAI,SAACC,EAAKC,GACvC,OACA,kBAACC,EAAD,CACCC,IAAKF,EACLV,GAAIM,EAAOI,GAAGV,GACdD,KAAMO,EAAOI,GAAGX,KAChBE,MAAOK,EAAOI,GAAGT,WAKtB,OACI,6BACQM,ICjBHD,EAAS,CAClB,CACEN,GAAI,EACJD,KAAM,aACNc,SAAU,OACVZ,MAAO,yBAET,CACED,GAAI,EACJD,KAAM,iBACNc,SAAU,QACVZ,MAAO,4BAET,CACED,GAAI,EACJD,KAAM,cACNc,SAAU,SACVZ,MAAO,2BAET,CACED,GAAI,EACJD,KAAM,qBACNc,SAAU,QACVZ,MAAO,sBAET,CACED,GAAI,EACJD,KAAM,kBACNc,SAAU,SACVZ,MAAO,4BAET,CACED,GAAI,EACJD,KAAM,iBACNc,SAAU,YACVZ,MAAO,uBAET,CACED,GAAI,EACJD,KAAM,cACNc,SAAU,SACVZ,MAAO,uBAET,CACED,GAAI,EACJD,KAAM,cACNc,SAAU,iBACVZ,MAAO,wBAET,CACED,GAAI,EACJD,KAAM,iBACNc,SAAU,UACVZ,MAAO,sBAET,CACED,GAAI,GACJD,KAAM,aACNc,SAAU,UACVZ,MAAO,yBC5CEa,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKb,UAAU,WACX,2BACAA,UAAU,mCACVc,KAAK,SACLC,YAAY,eACZC,SAAWH,MCGRI,G,MARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAQ,kBAAmBC,OAAO,SAC9DJ,EAAMK,YC6BJC,E,kDA5BX,aAAc,IAAD,8BACT,gBAOJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAPzC,EAAKC,MAAQ,CACT3B,OAASA,EACTwB,YAAc,IAJT,E,qDAYJ,IAAD,OACMI,EAAiBC,KAAKF,MAAM3B,OAAO8B,QAAO,SAAA9B,GAChD,OAAOA,EAAOP,KAAKsC,cAAcC,SAAS,EAAKL,MAAMH,YAAYO,kBAErE,OACI,yBAAKnC,UAAU,kBACX,wBAAIA,UAAU,OAAd,gBACA,kBAAC,EAAD,CAAWa,aAAcoB,KAAKR,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUrB,OAAQ4B,U,GAtBpBK,IAAMC,W,MCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.75038e31.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst card = ({name, id , email}) => {\r\n    return(\r\n        <div className=\"bg-lightest-blue dib br3 pa3 ma2 bw2 shadow-5 grow\">\r\n            <img alt=\"robot\" src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    const CardListComponont = robots.map((user,i)=> {\r\n        return (\r\n        <Card\r\n         key={i} \r\n         id={robots[i].id} \r\n         name={robots[i].name} \r\n         email={robots[i].email} \r\n         />\r\n    );\r\n})\r\n\r\n    return (\r\n        <div>\r\n               {CardListComponont}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","export const robots = [\r\n    {\r\n      id: 1,\r\n      name: 'Faiz Ahmed',\r\n      username: 'Faiz',\r\n      email: 'faizahmed66@gmail.com'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Nadia Ehtesham',\r\n      username: 'Nadia',\r\n      email: 'nadiaehtesham7@gmail.com'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Yusuf Hayat',\r\n      username: 'DjYuzi',\r\n      email: 'djuziofficial@gmail.com'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Abdur Rahman Moosa',\r\n      username: 'Moosa',\r\n      email: 'abdur786@gmail.com'\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'Mohammad Aaquib',\r\n      username: 'Aaquib',\r\n      email: 'mohammadaaquib@gmail.com'\r\n    },\r\n    {\r\n      id: 6,\r\n      name: 'Imran Siddique',\r\n      username: 'imran_cr7',\r\n      email: 'imrancr_7@gmail.com'\r\n    },\r\n    {\r\n      id: 7,\r\n      name: 'Anika Afroz',\r\n      username: 'Aneeks',\r\n      email: 'anika1994@gmail.com'\r\n    },\r\n    {\r\n      id: 8,\r\n      name: 'Abrar Karim',\r\n      username: 'Karim_Abrar786',\r\n      email: 'abrarkarim@yahoo.com'\r\n    },\r\n    {\r\n      id: 9,\r\n      name: 'Md Tanvir Alam',\r\n      username: 'Tango66',\r\n      email: 'tango_66@gmail.com'\r\n    },\r\n    {\r\n      id: 10,\r\n      name: 'Tony Stark',\r\n      username: 'IronMan',\r\n      email: 'iamIronMan@gmail.com'\r\n    }\r\n  ];\r\n\r\n\r\n  export default robots;\r\n  ","import React from 'react'\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className=\"pa2 mb4\">\r\n            <input \r\n            className=\"pa3 ba b--green bg-lightest-blue\"\r\n            type='search' \r\n            placeholder='Find a Robot'   \r\n            onChange= {searchChange}  \r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY:'scroll', border: '3px solid black', height:'60vh'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React from 'react'\r\nimport CardList from './CardList'\r\nimport {robots} from './robots'\r\nimport SearchBox from './SearchBox'\r\nimport './App.css'\r\nimport Scroll from './Scroll'\r\n\r\nclass App extends React.Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots : robots,\r\n            searchField : ''\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchField: event.target.value})\r\n    }\r\n\r\n    render(){\r\n            const filteredRobots = this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n            })\r\n        return(\r\n            <div className=\"tc baskerville\">\r\n                <h1 className=\"f-5\">Robo Friends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                    <CardList robots={filteredRobots}/>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}